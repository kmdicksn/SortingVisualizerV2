{"version":3,"sources":["logo.svg","components/utility/constants.js","components/utility/Util.js","components/algorithms/BubbleSort.js","components/algorithms/SelectionSort.js","components/algorithms/InsertionSort.js","components/algorithms/MergeSort.js","components/VisualizerChart.js","App.js","reportWebVitals.js","index.js"],"names":["DEFAULT_GRAPH_COLOUR","COMPLETED_GRAPH_COLOUR","COMPARING_GRAPH_COLOUR","randomizeChart","chart","count","n","negative","setColor","labels","Array","fill","datasets","data","from","length","Math","floor","random","color","backgroundColor","compareColor","elementOne","elementTwo","bubbleSort","chartSortOrder","i","j","push","JSON","parse","stringify","temp","selectionSort","min","insertionSort","key","chartSortArray","mergeSortHelper","middle","left","splice","merge","right","array","shift","console","log","mergeSort","VisualizerChart","options","chartRef","useRef","useState","setMyChart","useEffect","ctx","current","getContext","myChart","Chart","type","destroy","ref","id","Header","Layout","Footer","Sider","Content","MenuItem","Menu","SubMenu","styled","div","genData","label","borderWidth","plugins","legend","display","tooltip","enabled","animation","duration","App","delay","setDelay","loading","setLoading","sorting","setSorting","setN","setCount","setData","algorithms","countSliderUpdate","value","Object","assign","maxValueSliderUpdate","speedSliderUpdate","a","sortingSteps","Promise","r","setTimeout","className","theme","mode","defaultSelectedKeys","Item","onClick","width","defaultOpenKeys","style","height","borderRight","disabled","defaultValue","onChange","onAfterChange","max","step","sortingAndDisplay","then","padding","margin","minHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36fa04e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const DEFAULT_GRAPH_COLOUR = 'blue';\r\nconst COMPLETED_GRAPH_COLOUR = 'green';\r\nconst COMPARING_GRAPH_COLOUR = 'green';\r\n\r\nexport { DEFAULT_GRAPH_COLOUR, COMPLETED_GRAPH_COLOUR, COMPARING_GRAPH_COLOUR };","import { COMPARING_GRAPH_COLOUR, DEFAULT_GRAPH_COLOUR } from './constants';\n\n/*\nRandomizes chart.js object literal\n@param  {Object} chart The chart to be randomized\n@param  {int}    count The number of data in chart\n@param  {int}    n     The max the data can be\n@return {Object} \t   The randomized chart\n */\n\nconst randomizeChart = (chart, count, n, negative) => {\n\tsetColor(chart, DEFAULT_GRAPH_COLOUR);\n\t//Apply blank labels\n\tchart.labels = new Array(count).fill('');\n\t//Apply random variables\n\tif (negative)\n\t\tchart.datasets[0].data = Array.from({length: count}, () => Math.floor(Math.random() * (2 * n) - n));\n\telse\n\t\tchart.datasets[0].data = Array.from({length: count}, () => Math.floor(Math.random() * n));\n\treturn chart;\n};\n\n/*\nResets colour of all chart elements to the default. (blue in this case)\n@param \t{Object} chart The chart to be reset\n@return\t{Object} \t   The reset chart\n */\nconst setColor = (chart, color) => {\n\tconst count = chart.labels.length;\n\n\tchart.datasets[0].backgroundColor = new Array(count).fill(color);\n\n\treturn chart;\n}\n\n/*\nResets colour of chart and sets the two elements to be compared to green.\n@param\t{Object} chart \t\tThe chart to be coloured\n@param  {number} elementOne Index of first element to colour\n@param  {number} elementTwo Index of second element to colour\n */\nconst compareColor = (chart, elementOne, elementTwo) => {\n\tchart = setColor(chart, DEFAULT_GRAPH_COLOUR);\n\n\tchart.datasets[0].backgroundColor[elementOne] = COMPARING_GRAPH_COLOUR;\n\tchart.datasets[0].backgroundColor[elementTwo] = COMPARING_GRAPH_COLOUR;\n\n\treturn chart;\n}\n\n\nexport { randomizeChart, setColor, compareColor };","import { setColor, compareColor } from '../utility/Util';\nimport { COMPLETED_GRAPH_COLOUR } from '../utility/constants';\n\n/*\nStep-by-step sorting using Bubble Sort\n@param  {Object}   data\t\t\t\t The chart to be randomized\n@return [{Object}] chartSortOrder    The step-by-step array of sorting steps to sorted array\n */\nconst bubbleSort = (chart) => {\n\t// The step-by-step sorting data set object\n\tlet chartSortOrder = [];\n\n\tfor (let i = 0; i < chart.datasets[0].data.length; i++) {\n\t\tfor (let j = 0; j < (chart.datasets[0].data.length - i - 1); j++) {\n\t\t\tcompareColor(chart, j, j + 1);\n\t\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)));\n\t\t\tif (chart.datasets[0].data[j] > chart.datasets[0].data[j + 1]) {\n\t\t\t\tlet temp = chart.datasets[0].data[j];\n\t\t\t\tchart.datasets[0].data[j] = chart.datasets[0].data[j + 1];\n\t\t\t\tchart.datasets[0].data[j + 1] = temp;\n\t\t\t\t// add steps to array\n\t\t\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)))\n\t\t\t}\n\t\t}\n\t}\n\n\t//one last all green step\n\tsetColor(chart, COMPLETED_GRAPH_COLOUR);\n\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)))\n\n\treturn chartSortOrder;\n};\n\nexport default bubbleSort;\n","import { compareColor, setColor } from '../utility/Util';\nimport { COMPLETED_GRAPH_COLOUR } from '../utility/constants';\n\n/*\nStep-by-step sorting using Selection Sort\n@param  {Object}   data\t\t\t\t The chart to be randomized\n@return [{Object}] chartSortOrder    The step-by-step array of sorting steps to sorted array\n */\nconst selectionSort = (chart) => {\n\t// The step-by-step sorting data set object\n\tlet chartSortOrder = [];\n\tlet tempArray;\n\n\tfor (let i = 0; i < chart.datasets[0].data.length; i++) {\n\t\t// Finding the smallest number in the subarray\n\t\tlet min = i;\n\t\tfor (let j = i + 1; j < chart.datasets[0].data.length; j++) {\n\t\t\tcompareColor(chart, j, min);\n\t\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)))\n\t\t\tif (chart.datasets[0].data[j] < chart.datasets[0].data[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min !== i) {\n\t\t\t// Swapping the elements\n\t\t\tlet temp = chart.datasets[0].data[i];\n\t\t\tchart.datasets[0].data[i] = chart.datasets[0].data[min];\n\t\t\tchart.datasets[0].data[min] = temp;\n\t\t\t// add steps to array\n\t\t\ttempArray = [];\n\t\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)));\n\t\t}\n\t}\n\n\t//one last all green step\n\tsetColor(chart, COMPLETED_GRAPH_COLOUR);\n\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)))\n\n\treturn chartSortOrder;\n};\n\nexport default selectionSort;\n","import { setColor, compareColor } from '../utility/Util';\r\nimport { COMPLETED_GRAPH_COLOUR } from '../utility/constants';\r\n\r\n/*\r\nStep-by-step sorting using Insertion Sort\r\n@param  {Object}   data\t\t\t\t The chart to be randomized\r\n@return [{Object}] chartSortOrder    The step-by-step array of sorting steps to sorted array\r\n */\r\nconst insertionSort = (chart) => {\r\n\t// The step-by-step sorting data set object\r\n\tlet chartSortOrder = [];\r\n\tlet i, key, j;\r\n\r\n\tfor (i = 1; i < chart.datasets[0].data.length; i++) {\r\n\t\tkey = chart.datasets[0].data[i];\r\n\t\tj = i - 1;\r\n\t\tcompareColor(chart, key, j);\r\n\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)));\r\n\r\n\t\t/* Move elements of arr[0..i-1], that are\r\n\t\tgreater than key, to one position ahead\r\n\t\tof their current position */\r\n\t\twhile (j >= 0 && chart.datasets[0].data[j] > key)\r\n\t\t{\r\n\t\t\tchart.datasets[0].data[j + 1] = chart.datasets[0].data[j];\r\n\t\t\t// add steps to array\r\n\t\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)))\r\n\t\t\tj = j - 1;\r\n\t\t\tcompareColor(chart, key, j);\r\n\t\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)));\r\n\t\t}\r\n\t\tchart.datasets[0].data[j + 1] = key;\r\n\t\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)))\r\n\t}\r\n\r\n\t//one last all green step\r\n\tsetColor(chart, COMPLETED_GRAPH_COLOUR);\r\n\tchartSortOrder.push(JSON.parse(JSON.stringify(chart)))\r\n\r\n\treturn chartSortOrder;\r\n};\r\n\r\nexport default insertionSort;\r\n","let mainChart;\r\nlet chartSortArray = [];\r\n\r\n/*\r\nStep-by-step sorting using Merge Sort\r\n@param  {Object}   data\t\t\t\t The chart to be randomized\r\n@return [{Object}] chartSortOrder    The step-by-step array of sorting steps to sorted array\r\n */\r\nconst mergeSort = (chart) => {\r\n\tmainChart = chart;\r\n\treturn mergeSortHelper(chart);\r\n}\r\n\r\nconst mergeSortHelper = (chart) => {\r\n\tif (chart.datasets[0].data.length < 2) return chartSortArray;\r\n\r\n\tconst middle = chart.datasets[0].data.length / 2;\r\n\r\n\tconst left = chart.datasets[0].data.splice(0, middle);\r\n\treturn merge(mergeSortHelper(left), mergeSortHelper(chart));\r\n}\r\n\r\nconst merge = (left, right) => {\r\n\tlet array = [];\r\n\r\n\twhile (left.length && right.length) {\r\n\t\tif (left[0] < right[0]) {\r\n\t\t\tarray.push(left.shift());\r\n\t\t} else {\r\n\t\t\tarray.push(right.shift());\r\n\t\t}\r\n\t}\r\n\tconsole.log(array);\r\n\treturn [ ...array, ...left, ...right ];\r\n}\r\n\r\nexport default mergeSort;","import React, { useRef, useEffect, useState } from 'react';\nimport { Chart } from 'chart.js';\n\nconst VisualizerChart = ({data, options }) => {\n\tconst chartRef = useRef(null);\n\tconst [ myChart, setMyChart ] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst ctx = chartRef.current.getContext('2d');\n\t\tconst myChart = new Chart(ctx, {\n\t\t\toptions: {...options},\n\t\t\ttype: 'bar',\n\t\t\tdata: {...data},\n\t\t});\n\t\tsetMyChart(myChart);\n\t\treturn (() => myChart.destroy());\n\t}, [ chartRef, data, options ]);\n\n\treturn (\n\t\t<canvas ref={chartRef} id=\"displayChart\"/>\n\t);\n};\n\nexport default VisualizerChart;\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Layout, Menu, Slider, Button } from 'antd';\r\nimport { randomizeChart, setColor, compareColor } from './components/utility/Util';\r\nimport bubbleSort from './components/algorithms/BubbleSort';\r\nimport selectionSort from './components/algorithms/SelectionSort';\r\nimport insertionSort from './components/algorithms/InsertionSort';\r\nimport mergeSort from './components/algorithms/MergeSort'\r\nimport VisualizerChart from './components/VisualizerChart';\r\nimport styled from 'styled-components';\r\nimport { clearCanvas } from 'chart.js/helpers';\r\n\r\nconst {Header, Footer, Sider, Content} = Layout;\r\nconst {SubMenu} = Menu;\r\n\r\nconst MenuItem = styled.div`\r\n  margin: 15px 20px;\r\n  background-color: white;\r\n`;\r\n\r\nlet genData = {\r\n\tlabels: [ '', '', '', '', '', '', '', '', '', '' ],\r\n\tdatasets: [\r\n\t\t{\r\n\t\t\tbackgroundColor: ['blue','blue','blue','blue','blue','blue','blue','blue','blue','blue'],\r\n\t\t\tlabel: '',\r\n\t\t\tdata: [ 12, 19, 3, 5, 2, 3, 20, 13, 20, 5 ],\r\n\t\t\tborderWidth: 1,\r\n\t\t},\r\n\t],\r\n};\r\n\r\nconst options = {\r\n\tplugins: {\r\n\t\tlegend: {\r\n\t\t\tdisplay: false,\r\n\t\t},\r\n\t\ttooltip: {\r\n\t\t\tenabled: false\r\n\t\t},\r\n\t},\r\n\tanimation: {\r\n\t\tduration: 0,\r\n\t},\r\n};\r\n\r\nfunction App() {\r\n\tconst [ delay, setDelay ] = useState(600);\r\n\tconst [ loading, setLoading ] = useState(false);\r\n\tconst [ sorting, setSorting ] = useState('0');\r\n\tconst [ n, setN ] = useState(30);\r\n\tconst [ count, setCount ] = useState(10);\r\n\tconst [ data, setData ] = useState(genData);\r\n\tconst visualizerRef = useRef();\r\n\r\n\tconst algorithms = [\r\n\t\tbubbleSort,\r\n\t\tselectionSort,\r\n\t\tinsertionSort,\r\n\t\tmergeSort,\r\n\t];\r\n\r\n\tconst countSliderUpdate = (value) => {\r\n\t\tsetCount(value);\r\n\t\tsetData(Object.assign({}, randomizeChart(genData, count, n)));\r\n\t};\r\n\r\n\tconst maxValueSliderUpdate = (value) => {\r\n\t\tsetN(value + 1);\r\n\t\tsetData(Object.assign({}, randomizeChart(genData, count, n)));\r\n\t};\r\n\r\n\tconst speedSliderUpdate = (value) => {\r\n\t\tsetDelay(1100 - value);\r\n\t}\r\n\r\n\tasync function sortingAndDisplay() {\r\n\t\tlet sortingSteps = algorithms[sorting](genData);\r\n\t\twhile (sortingSteps.length > 0) {\r\n\t\t\tgenData = sortingSteps.shift();\r\n\t\t\tawait new Promise(r => setTimeout(r, delay));\r\n\t\t\tsetData(Object.assign({}, genData));\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Layout>\r\n\t\t\t\t<Header className=\"header\">\r\n\t\t\t\t\t<div className=\"logo\"/>\r\n\t\t\t\t\t<Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[ '0' ]}>\r\n\t\t\t\t\t\t<Menu.Item key={'0'} onClick={(key) => {setSorting(key.key);}}>Bubble Sort</Menu.Item>\r\n\t\t\t\t\t\t<Menu.Item key={'1'} onClick={(key) => {setSorting(key.key);}}>Selection Sort</Menu.Item>\r\n\t\t\t\t\t\t<Menu.Item key={'2'} onClick={(key) => {setSorting(key.key);}}>Insertion Sort</Menu.Item>\r\n\t\t\t\t\t\t{/*<Menu.Item key={'3'} onClick={(key) => {setSorting(key.key);}}>Merge Sort</Menu.Item>*/}\r\n\t\t\t\t\t</Menu>\r\n\t\t\t\t</Header>\r\n\t\t\t\t<Layout>\r\n\t\t\t\t\t<Sider width={200} className=\"site-layout-background\">\r\n\t\t\t\t\t\t<Menu\r\n\t\t\t\t\t\t\tmode=\"inline\"\r\n\t\t\t\t\t\t\tdefaultSelectedKeys={[ '1' ]}\r\n\t\t\t\t\t\t\tdefaultOpenKeys={[ 'sub1' ]}\r\n\t\t\t\t\t\t\tstyle={{height: '100vh', borderRight: 0}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<MenuItem>\r\n\t\t\t\t\t\t\t\t<h4>Size:</h4>\r\n\t\t\t\t\t\t\t\t<Slider disabled={loading} min={1} defaultValue={10} onChange={countSliderUpdate}\r\n\t\t\t\t\t\t\t\t\t\tonAfterChange={countSliderUpdate}/>\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem>\r\n\t\t\t\t\t\t\t\t<h4>Max Value:</h4>\r\n\t\t\t\t\t\t\t\t<Slider disabled={loading} min={1} defaultValue={10} onChange={maxValueSliderUpdate}\r\n\t\t\t\t\t\t\t\t\t\tonAfterChange={maxValueSliderUpdate}/>\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem>\r\n\t\t\t\t\t\t\t\t<h4>Speed:</h4>\r\n\t\t\t\t\t\t\t\t<Slider disabled={loading} min={100} max={5000} defaultValue={500} step={100}\r\n\t\t\t\t\t\t\t\t\t\tonChange={speedSliderUpdate} onAfterChange={speedSliderUpdate}/>\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t{/*<MenuItem>*/}\r\n\t\t\t\t\t\t\t{/*\t<h4>Speed:</h4>*/}\r\n\t\t\t\t\t\t\t{/*\t<Slider/>*/}\r\n\t\t\t\t\t\t\t{/*</MenuItem>*/}\r\n\t\t\t\t\t\t\t<MenuItem>\r\n\t\t\t\t\t\t\t\t<Button loading={loading} onClick={()=>{\r\n\t\t\t\t\t\t\t\t\tsetLoading(true);\r\n\t\t\t\t\t\t\t\t\tsortingAndDisplay().then(r => setLoading(false));\r\n\t\t\t\t\t\t\t\t}}>Sort</Button>\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem>\r\n\t\t\t\t\t\t\t\t<Button loading={loading} onClick={() => {\r\n\t\t\t\t\t\t\t\t\tsetData(Object.assign({}, randomizeChart(genData, count, n)));\r\n\t\t\t\t\t\t\t\t}}>Randomize</Button>\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t</Menu>\r\n\t\t\t\t\t</Sider>\r\n\t\t\t\t\t<Layout style={{padding: '0 24px 24px'}}>\r\n\t\t\t\t\t\t<Content\r\n\t\t\t\t\t\t\tclassName=\"site-layout-background\"\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: 24,\r\n\t\t\t\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\t\t\t\tminHeight: 280,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<VisualizerChart data={data} options={options} />\r\n\t\t\t\t\t\t</Content>\r\n\t\t\t\t\t\t<Footer>Created by Dickson Ngan</Footer>\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t</Layout>\r\n\t\t\t</Layout>,\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}